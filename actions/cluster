#!/usr/bin/env bash

# Copyright (c) 2012 Dickson S. Guedes.
#
# This module is free software; you can redistribute it and/or modify it under
# the [PostgreSQL License](http://www.opensource.org/licenses/postgresql).
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose, without fee, and without a written agreement is
# hereby granted, provided that the above copyright notice and this paragraph
# and the following two paragraphs appear in all copies.
#
# In no event shall Dickson S. Guedes be liable to any party for direct,
# indirect, special, incidental, or consequential damages, including lost
# profits, arising out of the use of this software and its documentation, even
# if Dickson S. Guedes has been advised of the possibility of such damage.
#
# Dickson S. Guedes specifically disclaims any warranties, including, but not
# limited to, the implied warranties of merchantability and fitness for a
# particular purpose. The software provided hereunder is on an "as is" basis,
# and Dickson S. Guedes has no obligations to provide maintenance, support,
# updates, enhancements, or modifications.

source $pgvm_home/actions/current

usage()
{
    echo """
Manipulates clusters within pgvm.

Usage: pgvm cluster <action> <args>

  - action

    create      Creates a new cluster (PGDATA)
    remove      Removes a cluster
    rename      Renames a cluster
    list        List all clusters of current environment
    list --all  List all clusters of all environments

    import      Import a cluster from tarball
    export      Export a cluster to tarball
"""
}

cluster()
{
    action=$1       ; shift

    [[ -z "$action" ]] && usage && exit 1

    $action $@
}

create()
{
    cluster_name=$1 ; shift
    initdb_options="$*"
    current=$(current_version)

    [[ -z "$cluster_name" ]] && echo "please, choose a name for cluster!" && exit 1

    cluster_top_dir="$pgvm_home/clusters/${current}"
    cluster_dir="${cluster_top_dir}/${cluster_name}"

    [[ -d "$cluster_dir" ]] && echo "cluster '${cluster_dir}' already exists!" && exit 1

    mkdir --parents $cluster_top_dir
    mkdir --parents $pgvm_home/logs

    echo -n "initializing cluster in '$cluster_dir'... "
    $pgvm_home/environments/current/bin/initdb -D $cluster_dir $initdb_options 1> $pgvm_home/logs/install.$cluster_name@${current}.log 2>$pgvm_home/logs/install.$cluster_name@${current}.error.log

    [[ $? -ne 0 ]] && echo "error!" && cat $pgvm_home/logs/install.$cluster_name@${current}.error.log && exit 1

    last_port=$(find $pgvm_home/clusters -name "postgresql.conf" -exec egrep "port =" {} \; | awk '{ printf $3"\n" ;}' | sort -n | tail -1)
    next_port=$(($last_port + 1))

    echo -e "\n# added by 'pgvm' at `date`" >> $cluster_dir/postgresql.conf
    echo "port = $next_port" >> $cluster_dir/postgresql.conf

    echo "ok!"
}

list()
{
    current=$(current_version)
    cluster_top_dir="$pgvm_home/clusters/${current}"
    clusters=$(find ${cluster_top_dir}/* -maxdepth 0 -type d -exec basename {} \; 2> /dev/null)

    if [ "$current_version" == "Please, install a PostgreSQL Version!" ]
    then
        echo $current_version
        exit 1
    fi

    if [ "$1x" == "--allx" ]
    then
        versions=$(find ${cluster_top_dir}/* -maxdepth 0 -type d)
        if [ "$versions" == "" ]
        then
          echo "there is no created clusters"
          exit 1
        fi
    else
        versions="$cluster_top_dir/$(current)"
    fi

    for top_dir in ${versions}
    do
        clusters=$(find ${top_dir}/* -maxdepth 0 -type d -exec basename {} \; 2> /dev/null)
        cluster_version=$(basename $top_dir)

        [[ -z "$clusters" ]] && echo "there is no clusters in current environment (${cluster_version})" && exit 1

        max_length=$(echo $clusters | awk 'BEGIN { RS = " " } ; { print length() }' | sort -n | tail -1)

        for cluster in ${clusters}
        do
            printf "%3s %-6s %-${max_length}s is %-7s at port %-4s\n" "$is_current" "$cluster_version" "$cluster" "$(cluster_human_status $cluster $cluster_version)" "$(cluster_port $cluster $cluster_version)"
        done
    done
}

start()
{
    [[ -z "$1" ]] && usage && exit 1

    echo "starting cluster $1@$(current_version)"
    cluster_ctl start $1
}

stop()
{
    [[ -z "$1" ]] && usage && exit 1

    echo "stopping cluster $1@$(current_version)"
    cluster_ctl stop $1
}

status()
{
    [[ -z "$1" ]] && usage && exit 1

    echo "checking status of cluster $1@$(current_version)"
    cluster_ctl status $1
}

use()
{
    echo "not implemented" && exit 1
    cluster_top_dir="$pgvm_home/clusters/$(current_version)"
    cluster_name=${1}
    cluster="${cluster_top_dir}/${cluster_name}"

    [[ -f "$cluster/PG_VERSION" ]] && [[ ! -e "$cluster/" ]]
}

remove()
{
    cluster_top_dir="$pgvm_home/clusters/$(current_version)"
    cluster_name=${1} ; shift
    cluster="${cluster_top_dir}/${cluster_name}"
    rest=${1}

    [[ ! -d $cluster ]] && echo "cluster '$cluster_name' does not exists!" && exit 1

    [[ "$rest" != "--force" ]] && echo "To remove cluster '$cluster_name' use  'pgvm cluster remove $cluster_name --force'" && exit 1

    [[ $(cluster_human_status $cluster_name) == "online" ]] && stop $cluster_name

    echo -n "removing '$cluster_name' directory '$cluster' ... "
    rm -r $cluster && echo "ok" && exit 0

    echo "erro!"
}

cluster_ctl()
{
    action=$1
    cluster_name=$2
    cluster_top_dir="$pgvm_home/clusters/$(current_version)"
    cluster_dir=${cluster_top_dir}/${cluster_name}

    $pgvm_home/environments/current/bin/pg_ctl --silent -w -D $cluster_dir $action || exit 1
}

cluster_human_status()
{
    [[ -z "$1" ]] && echo "please, choose a cluster" && exit 1

    cluster_name=$1
    cluster_version=${2:-$(current_version)}
    cluster_top_dir="$pgvm_home/clusters/$cluster_version"
    cluster_dir=${cluster_top_dir}/${cluster_name}

    $pgvm_home/environments/$cluster_version/bin/pg_ctl -D $cluster_dir status 1>/dev/null 2>/dev/null && echo "online" || echo "offline"
}

cluster_port()
{
    [[ -z "$1" ]] && echo "please, choose a cluster" && exit 1

    cluster_name=$1
    cluster_version=${2:-$(current_version)}
    cluster_top_dir="$pgvm_home/clusters/$cluster_version"
    cluster_dir=${cluster_top_dir}/${cluster_name}

    cluster_port=$(egrep "^\s*port\s*=" $cluster_dir/postgresql.conf)
    [[ -z "$cluster_port" ]] && cluster_port=$(egrep "^#\s*port\s*=" $cluster_dir/postgresql.conf)

    echo $cluster_port | awk '{ printf $3"\n" ;}' | tail -1
}
